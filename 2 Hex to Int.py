# a.Перетворення значення HEX в Little Endian значення
def hexToLittle (hexVal, numOfBytes):
   numOfBits = numOfBytes * 8
   binVal = bin(int(hexVal, 16))[2:]

   if len(binVal) < numOfBits:
      binVal = "0" * (numOfBits - len(binVal)) + binVal 

   #divide into bytes
   bytesArr = []
   for i in range(numOfBytes):
      currByte = binVal[i*8:(i+1)*8]
      bytesArr.append(currByte)
   
   #swap
   for j in range(int(numOfBytes/2)): 
      bytesArr[j], bytesArr[numOfBytes-j-1] = bytesArr[numOfBytes-j-1], bytesArr[j]

   #collect bytes into a bit string
   bitStr = ""
   for i in bytesArr:
      bitStr += i

   return int(bitStr, 2)

# b.Перетворення значення HEX в Little Endian значення
def hexToBig (hexVal):
   binVal = bin(int(hexVal, 16))[2:]
   return int(binVal, 2)

#c.Перетворення значення Little Endian на HEX значення
def littleToHex (littleVal, numOfBytes):
   numOfBits = numOfBytes * 8
   binVal = bin(littleVal)[2:]

   if len(binVal) < numOfBits:
      binVal = "0" * (numOfBits - len(binVal)) + binVal 

   #divide into bytes
   bytesArr = []
   for i in range(numOfBytes):
      currByte = binVal[i*8:(i+1)*8]
      bytesArr.append(currByte)
   
   #swap
   for j in range(int(numOfBytes/2)): 
      bytesArr[j], bytesArr[numOfBytes-j-1] = bytesArr[numOfBytes-j-1], bytesArr[j]

   #collect bytes into a bit string
   bitStr = ""
   for i in bytesArr:
      bitStr += i

   return hex(int(bitStr,2))

#d.Перетворення BIG Endian значення в HEX значення
def bigToHex (bigVal):
   return hex(bigVal)

#Test vectors:
def catchError(number, hexVal, numOfBytes, littleVal, bigVal):
   print("\n")
   hexVal = hexVal.lower()
   try:
      hexTolittleVal = hexToLittle(hexVal, numOfBytes)
      if littleVal != hexTolittleVal:
         print(f"Error vallue hexToLittle {number}")
         print(f"correct vallue {littleVal}")
         print(f"incorrect vallue {hexTolittleVal}\n")
      else: print(f"Correct hexToLittle {number}\n")

      hexToBigVal = hexToBig(hexVal)
      if bigVal != hexToBigVal:
         print(f"Error vallue hexToBig {number}")
         print(f"correct vallue {bigVal}")
         print(f"incorrect vallue {hexToBigVal}\n")
      else: print(f"Correct hexToBig {number}\n")

      littleToHexVal = littleToHex(littleVal, numOfBytes)
      if littleToHexVal != hexVal:
         print(f"Error vallue littleToHex {number}")
         print(f"correct vallue {hexVal}")
         print(f"incorrect vallue {littleToHexVal}\n")
      else: print(f"Correct littleToHex {number}\n")

      bigToHexVal = bigToHex(bigVal)
      if hexVal != bigToHexVal:
         print(f"Error vallue bigToHex {number}")
         print(f"correct vallue {hexVal}")
         print(f"incorrect vallue {bigToHexVal}\n")
      else: print(f"Correct bigToHex {number}\n")
   except:
         print('Error!!!')

#a.Vector 1:
catchError(1,"0xff00000000000000000000000000000000000000000000000000000000000000", 32, 255, 115339776388732929035197660848497720713218148788040405586178452820382218977280)
#b.Vector 2:
catchError(2,"0xaaaa000000000000000000000000000000000000000000000000000000000000", 32, 43690, 77193548260167611359494267807458109956502771454495792280332974934474558013440)
#c.Vector 3:
catchError(3,"0xFFFFFFFF", 4, 4294967295, 4294967295)
#d.Vector 4:
catchError(4,"0x

